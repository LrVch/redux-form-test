{"version":3,"sources":["services/prism.servise.js","store/reducers/user.js","store/actions/user.js","store/reducers/ui.js","store/actions/ui.js","store/reducers/index.js","utils/common.js","utils/validators.js","utils/mockData.js","pages/Page/Page.js","components/shared/renderField/renderField.js","components/SyncValidationFormYup/SyncValidationFormYup.js","components/SimpleForm/SimpleForm.js","components/SyncValidationForm/SyncValidationForm.js","components/FieldLevelValidation/FieldLevelValidation.js","components/MixedSyncValidation/MixedSyncValidation.js","components/AsyncBlurValidation/AsyncBlurValidation.js","components/AsyncChangeValidation/AsyncChangeValidation.js","components/shared/ErrorMessage/ErrorMessage.js","store/selectors/user.js","components/InitializeFromState/InitializeFromState.js","components/SelectingFormValues/SelectingFormValues.js","components/FieldArraysForm/Member/MemberTypes.js","components/FieldArraysForm/RenderHobbies/RenderHobbies.js","components/FieldArraysForm/FieldArraysForm.js","components/FieldArraysForm/Member/Member.js","components/shared/ShowCaseButton/ShowCaseButton.js","store/selectors/ui.js","components/ShowCase/ShowCase.js","components/Wrapper/Wrapper.js","components/shared/Spiner/Spiner.js","components/CodeListening/CodeListening.js","App.js","index.js","configureStore.js"],"names":["root","process","PrismService","theme","this","stylePrevRef","styleRef","document","createElement","rel","type","head","appendChild","Promise","res","rej","href","onload","removeChild","setTimeout","console","log","onerror","initialState","colors","account","userReducer","state","payload","clubInfo","prismShowLoader","uiReducer","combineReducers","form","formReducer","user","ui","logger","value","repeat","JSON","stringify","syncValidator","schema","formValues","props","context","validateSync","abortEarly","errors","resultErrors","inner","forEach","error","test","path","set","message","required","undefined","minLength","min","regexMin","RegExp","regexValue","regexLength","length","replace","minValue","tooYoung","age","regexAge","aol","alphaNumeric","russianPhoneNumberPattern","pattern","asyncValidate","values","dispatch","blurredField","ms","resolve","then","username","includes","asyncErrors","checkUserName","email","checkUserEmail","checkUserAge","userAccount","firstName","lastName","anniversaryDate","sex","employed","favoriteColor","bio","userClubInfo","clubName","members$","hobbies$","Page","children","RenderField","input","label","meta","asyncValidating","touched","warning","noValidate","onDestoy","blockInput","isCheckRadio","isSelect","isInput","isRadio","isTextArea","invalid","isWarning","valid","id","Math","random","toString","slice","useEffect","className","htmlFor","style","position","left","right","top","bottom","zIndex","placeholder","role","validationSchema","yup","shape","max","typeError","positive","integer","warningSchema","reduxForm","validate","warn","handleSubmit","pristine","reset","submitting","onSubmit","Field","name","component","disabled","onClick","listing","isNaN","Number","warnings","maxLength15","regexMax","maxLength","minLength2","userNameRequired","userNameAlphaNumeric","phoneNumberRequired","userRussianPhoneNumberPattern","userEmail","userDeprecetedMail","userEmailRequired","minValue13","userTooYoung","userAgeRequired","ageNumber","number","asyncBlurFields","persistentSubmitErrors","asyncChangeFields","ErrorMessage","userState","getUserAccount","createSelector","getUserColors","getUserClubInfo","agreement","InitializeFromState","load","isAccount","Object","keys","mockUserAccount","map","color","i","key","enableReinitialize","connect","initialValues","nickname","when","nicknameRequired","hasEmail","is","otherwise","SelectingFormValues","hasEmailValue","favoriteColorValue","resetSection","memorizedDestroyEmail","useCallback","height","width","margin","backgroundColor","selector","formValueSelector","touchOnChange","RenderHobbies","fields","maxHobbiesLength","push","hobby","index","title","remove","aria-hidden","Member","member","hobbies","moveCard","endDrag","beginDrag","highLight","fieldsLength","ref","useRef","useDrop","accept","MemberTypes","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","end","begin","collectedProps","drag","opacity","isMobile","move","icon","faArrowUp","faArrowDown","faTimes","fontSize","b","target","FieldArray","of","RenderMembers","submitFailed","allFields","getAll","useState","setIsDragging","setHoverIndex","swap","FieldArraysForm","mockUserClubInfo","membersArrayWarnings","memberIndex","memberWarnings","_warning","ShowCaseButton","text","uiState","getTheme","getPrismShowLoader","showLoader","onChangeTheme","changeTheme","uiChangeTheme","catch","finally","uiPrismHideLoader","uiChangeThemeInDome","codeListining","show","setShow","handleClose","Modal","dialogClassName","onHide","Header","closeButton","Container","fluid","Row","Col","xs","Title","faFillDrip","Body","Footer","Button","variant","Wrapper","Spiner","codeListening","lang","App","setNicknameRequired","nickRequired","submit","SimpleFormListing","InitializeFromStateListing","SyncValidationFormListing","MixedSyncValidationListing","obj","SyncValidationFormYupListing","AsyncBlurValidationListing","FieldArraysFormListing","FieldLevelValidationListing","AsyncChangeValidationListing","store","middlewares","thunk","createStore","reducer","composeWithDevTools","applyMiddleware","configureStore","AppBundle","backend","TouchBackend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ae834414.chunk.js","sourcesContent":["const isDeploy = process.env.REACT_APP_GH_PAGES\r\nconst projectName = process.env.REACT_APP_PROJECT_NAME\r\n\r\nconst root = isDeploy ? `/${projectName}` : ''\r\n\r\nexport default class PrismService {\r\n  static styleRef = null\r\n  static stylePrevRef = null\r\n\r\n  static changeTheme(theme) {\r\n    this.stylePrevRef = this.styleRef\r\n    this.styleRef = document.createElement('link')\r\n    this.styleRef.rel = 'stylesheet'\r\n    this.styleRef.type = 'text/css'\r\n    document.head.appendChild(this.styleRef)\r\n\r\n    return new Promise((res, rej) => {\r\n      this.styleRef.href = `${root}/styles/prismjs/themes/${theme}.css`\r\n\r\n      this.styleRef.onload = () => {\r\n        this.stylePrevRef && document.head.removeChild(this.stylePrevRef)\r\n        setTimeout(() => {\r\n          res(theme)\r\n        })\r\n        console.log('theme loaded ', theme)\r\n      }\r\n\r\n      this.styleRef.onerror = () => rej()\r\n    })\r\n  }\r\n}","import * as actionsTypes from '../actions';\r\n\r\nconst initialState = {\r\n  colors: ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet'],\r\n  account: {}\r\n}\r\n\r\nconst userReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n\r\n    case actionsTypes.USER_DATA_SUCCESS: {\r\n      const { account } = payload\r\n      return {\r\n        ...state,\r\n        account\r\n      }\r\n    }\r\n\r\n    case actionsTypes.USER_CLUB_INFO_SUCCESS: {\r\n      const { clubInfo } = payload\r\n      return {\r\n        ...state,\r\n        clubInfo\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default userReducer","export const USER_DATA_SUCCESS = 'USER_DATA_SUCCESS'\r\nexport const USER_CLUB_INFO_SUCCESS = 'USER_CLUB_INFO_SUCCESS'\r\n\r\nexport const userDataSuccess = (account) => ({\r\n  type: USER_DATA_SUCCESS,\r\n  payload: { account }\r\n})\r\n\r\nexport const userClubInfoSuccess = (clubInfo) => ({\r\n  type: USER_CLUB_INFO_SUCCESS,\r\n  payload: { clubInfo }\r\n})\r\n","import * as actionsTypes from '../actions';\r\n\r\nconst initialState = {\r\n  theme: 'prism-okaidia',\r\n  prismShowLoader: false\r\n}\r\n\r\nconst uiReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n\r\n    case actionsTypes.UI_CHANGE_THEME: {\r\n      const { theme } = payload\r\n      return {\r\n        ...state,\r\n        theme\r\n      }\r\n    }\r\n\r\n    case actionsTypes.UI_PRISM_SHOW_LOADER: {\r\n      return {\r\n        ...state,\r\n        prismShowLoader: true\r\n      }\r\n    }\r\n\r\n    case actionsTypes.UI_PRISM_HIDE_LOADER: {\r\n      return {\r\n        ...state,\r\n        prismShowLoader: false\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default uiReducer","import PrismService from \"../../services/prism.servise\";\r\n\r\nexport const UI_CHANGE_THEME = 'UI_CHANGE_THEME'\r\nexport const UI_PRISM_SHOW_LOADER = 'UI_PRISM_SHOW_LOADER'\r\nexport const UI_PRISM_HIDE_LOADER = 'UI_PRISM_HIDE_LOADER'\r\n\r\nexport const uiChangeTheme = (theme) => ({\r\n  type: UI_CHANGE_THEME,\r\n  payload: {\r\n    theme\r\n  }\r\n})\r\n\r\nexport const uiPrismShowLoader = (payload) => ({\r\n  type: UI_PRISM_SHOW_LOADER,\r\n  payload\r\n})\r\n\r\nexport const uiPrismHideLoader = (payload) => ({\r\n  type: UI_PRISM_HIDE_LOADER,\r\n  payload\r\n})\r\n\r\nexport const uiChangeThemeInDome = (theme) => {\r\n  return (dispatch) => {\r\n    dispatch(uiPrismShowLoader())\r\n    PrismService.changeTheme(theme)\r\n      .then(theme => {\r\n        dispatch(uiChangeTheme(theme));\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => dispatch(uiPrismHideLoader()))\r\n  };\r\n}\r\n\r\n","\r\nimport { combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport userReducer from './user'\r\nimport uiReducer from './ui'\r\n  \r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n  user: userReducer,\r\n  ui: uiReducer\r\n})","export const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const logger = value => {\r\n  console.log('='.repeat(20))\r\n  console.log(JSON.stringify(value, null, 4))\r\n  console.log('='.repeat(20))\r\n}","import { sleep } from './common'\r\nimport set from 'lodash/set'\r\n\r\nexport const asyncValidator = schema => async (formValues, props) => {\r\n  const context = props.context || {}\r\n  try {\r\n    await schema.validate(formValues, { abortEarly: false, context })\r\n\r\n    return Promise.resolve({})\r\n  } catch (errors) {\r\n    const resultErrors = errors.inner.reduce(\r\n      (errors, err) => ({\r\n        ...errors,\r\n        [err.path]: err.message\r\n      }), {})\r\n\r\n    return Promise.reject(resultErrors)\r\n  }\r\n}\r\n\r\n// export const syncValidator = schema => (formValues, props) => {\r\n//   const context = props.context || {}\r\n//   try {\r\n//     schema.validateSync(formValues, { abortEarly: false, context })\r\n\r\n//     return {}\r\n//   } catch (errors) {\r\n//     const resultErrors = errors.inner.reduce(\r\n//       (errors, err) => ({\r\n//         ...errors,\r\n//         [err.path]: err.message\r\n//       }), {})\r\n\r\n//     return resultErrors\r\n//   }\r\n// }\r\n\r\nexport const syncValidator = schema => (formValues, props) => {\r\n  const context = props.context || {}\r\n  try {\r\n    schema.validateSync(formValues, { abortEarly: false, context })\r\n\r\n    return {}\r\n  } catch (errors) {\r\n    // console.log('errors', errors)\r\n    let resultErrors = {}\r\n\r\n    errors.inner.forEach((error) => {\r\n      // console.log('error.path', error.path)\r\n      // Checks whether it's an array or not.\r\n      // If a $ sign is in a path, it's an array\r\n      if (/\\$/.test(error.path)) {\r\n\r\n        // Checks if it's a top level of an array\r\n        // If a path ends with a $ sign, it's a top level of an array\r\n        if (/\\$$/.test(error.path)) {\r\n          set(resultErrors, error.path + '[_error]', error.message);\r\n          // If the path includes the $ sign and number wrapped with square brackets,\r\n          // it's a multilevel path\r\n        } else if (/\\$\\[\\d+\\]/.test(error.path)) { \r\n          set(resultErrors, error.path, error.message);\r\n        }\r\n\r\n      } else {\r\n        set(resultErrors, error.path, error.message);\r\n        // resultErrors[error.path] = error.message\r\n      }\r\n    })\r\n\r\n    // console.log('resultErrors', resultErrors)\r\n\r\n    return resultErrors\r\n  }\r\n}\r\n\r\nexport const required = (message = 'Required') => value =>\r\n  value ? undefined : message\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\nexport const maxLength = (max, message = 'Must be ${max} characters or less') =>\r\n  (value) => {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexMax = new RegExp('\\\\${max}', 'gi')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexValue = new RegExp('\\\\${value}', 'gi')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexLength = new RegExp('\\\\${length}', 'gi')\r\n\r\n    return value && value.length > max ? message\r\n      .replace(regexMax, max)\r\n      .replace(regexValue, value)\r\n      .replace(regexLength, value.length) : undefined\r\n  }\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\nexport const minLength = (min, message = 'Must be ${min} characters or more') =>\r\n  (value = '') => {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexMin = new RegExp('\\\\${min}', 'gi')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexValue = new RegExp('\\\\${value}', 'gi')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexLength = new RegExp('\\\\${length}', 'gi')\r\n\r\n    return value.length < min ? message\r\n      .replace(regexMin, min)\r\n      .replace(regexValue, value)\r\n      .replace(regexLength, value.length) : undefined\r\n  }\r\n\r\nexport const number = (message = 'Must be a number') => value => {\r\n  // eslint-disable-next-line no-template-curly-in-string\r\n  const regexValue = new RegExp('\\\\${value}', 'gi')\r\n  return value && isNaN(Number(value)) ? message.replace(regexValue, value) : undefined\r\n}\r\n\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\nexport const minValue = (min, message = 'Must be at least ${min}') => value => {\r\n  // eslint-disable-next-line no-template-curly-in-string\r\n  const regexMin = new RegExp('\\\\${min}', 'gi')\r\n  // eslint-disable-next-line no-template-curly-in-string\r\n  const regexValue = new RegExp('\\\\${value}', 'gi')\r\n\r\n  return value && value < min ? message\r\n    .replace(regexMin, min)\r\n    .replace(regexValue, value) : undefined\r\n\r\n}\r\n\r\nexport const email = (message = 'Invalid email address') => value =>\r\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n    ? message\r\n    : undefined\r\n\r\nexport const tooYoung = (age = 0, message = 'You do not meet the minimum age requirement!') =>\r\n  value => {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexAge = new RegExp('\\\\${age}', 'gi')\r\n    return value && value < age\r\n      ? message.replace(regexAge, age)\r\n      : undefined\r\n  }\r\n\r\nexport const aol = (message = 'Really? You still use AOL for your email?') => value =>\r\n  value && /.+@aol\\.com/.test(value)\r\n    ? message\r\n    : undefined\r\n\r\nexport const alphaNumeric = (message = 'Only alphanumeric characters') =>\r\n  value => value && /[^a-zA-Z0-9 ]/i.test(value)\r\n    ? message\r\n    : undefined\r\n\r\nexport const russianPhoneNumberPattern = (\r\n  pattern = '+7 (XXX) XXX-XX-XX',\r\n  // eslint-disable-next-line no-template-curly-in-string\r\n  message = 'Invalid phone number, a format of a phone number must be ${pattern} '\r\n) =>\r\n  (value) => {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    const regexLength = new RegExp('\\\\${pattern}', 'gi')\r\n    return value && !/^(\\+7 \\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{2}-[0-9]{2})$/i.test(value)\r\n      ? message.replace(regexLength, pattern)\r\n      : undefined\r\n  }\r\n\r\n\r\nconst checkUserName = (username, props) => {\r\n  if (['john', 'paul', 'george', 'ringo'].includes(username)) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw { ...props.asyncErrors, username: 'That username is taken' }\r\n  }\r\n}\r\n\r\nconst checkUserEmail = (email, props) => {\r\n  if (['john@mail.com', 'paul@mail.com', 'george@mail.com', 'ringo@mail.com']\r\n    .includes(email)) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw { ...props.asyncErrors, email: 'That email is already taken' }\r\n  }\r\n}\r\n\r\nconst checkUserAge = (age, props) => {\r\n  if (age < 16) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw { ...props.asyncErrors, age: 'You are too young :(' }\r\n  }\r\n}\r\n\r\n\r\nexport const asyncValidate = (values, dispatch, props, blurredField) => {\r\n  console.log(props)\r\n  return sleep(1000).then(() => {\r\n    if (blurredField === 'username') {\r\n      checkUserName(values.username, props)\r\n    }\r\n\r\n    if (blurredField === 'email') {\r\n      checkUserEmail(values.email, props)\r\n    }\r\n\r\n    if (blurredField === 'age') {\r\n      checkUserAge(values.age, props)\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// const checkUserName = async ({username}, dispatch, props, field) => {\r\n//   console.log(props)\r\n//   await sleep(1000)\r\n//   if (['john', 'paul', 'george', 'ringo'].includes(username)) {\r\n//     // eslint-disable-next-line no-throw-literal\r\n//     return Promise.reject( {...props.asyncErrors, username: 'That username is taken' })\r\n//   }\r\n\r\n//   return Promise.resolve()\r\n// }\r\n\r\n// const checkUserEmail = async ({email}, dispatch, props, field) => {\r\n//   await sleep(1000)\r\n//   if (['john@mail.com', 'paul@mail.com', 'george@mail.com', 'ringo@mail.com']\r\n//     .includes(email)) {\r\n//     // eslint-disable-next-line no-throw-literal\r\n//     return Promise.reject(  {...props.asyncErrors, email: 'That email is already taken' })\r\n//   }\r\n\r\n//   return Promise.resolve()\r\n// }\r\n// const checkUserAge = async ({age}, dispatch, props, field) => {\r\n//   await sleep(1000)\r\n//   if (age < 16) {\r\n//     // eslint-disable-next-line no-throw-literal\r\n//     return Promise.reject(  {...props.asyncErrors, age: 'You are too young :(' })\r\n//   }\r\n\r\n//   return Promise.resolve()\r\n// }\r\n\r\n// const composeAsyncValidators = (validatorFns) => {\r\n//   return async (values, dispatch, props, field) => {\r\n//     const validatorFn = validatorFns[field]\r\n//     await validatorFn(values, dispatch, props, field);\r\n//   };\r\n// }\r\n\r\n// export const asyncValidate = composeAsyncValidators({  \r\n//   username: checkUserName,\r\n//   email: checkUserEmail,\r\n//   age: checkUserAge\r\n// })\r\n\r\n","export const userAccount = {\r\n    // uses to populate \"account\" reducer when \"Load\" is clicked\r\n    firstName: 'Jane',\r\n    lastName: 'Doe',\r\n    age: '42',\r\n    anniversaryDate: '2018-08-22',\r\n    sex: 'female',\r\n    employed: true,\r\n    favoriteColor: 'Blue',\r\n    bio: 'Born to write amazing Redux code.'\r\n}\r\n\r\nexport const userClubInfo = {\r\n    clubName: 'Some club in the hood',\r\n    members$: [\r\n        {\r\n            firstName: 'Jane',\r\n            lastName: 'Doe',\r\n            hobbies$: [\r\n                'reading',\r\n                'swimming'\r\n            ]\r\n        },\r\n        {\r\n            firstName: 'Sam',\r\n            lastName: ' Peterson',\r\n            hobbies$: [\r\n                'sport',\r\n                'running',\r\n                'writing'\r\n            ]\r\n        }\r\n    ]\r\n}","import { logger } from '../../utils'\r\n\r\nconst Page  = ({children}) => {\r\n  const submit = values => {\r\n    logger(values)\r\n  }\r\n    return children(submit)\r\n}\r\n\r\nexport default Page","import React, { useEffect } from 'react'\r\n\r\nexport const RenderField = ({\r\n  children,\r\n  input,\r\n  label,\r\n  meta: { asyncValidating, touched, error, warning },\r\n  noValidate,\r\n  onDestoy,\r\n  type,\r\n  blockInput\r\n}) => {\r\n  const isCheckRadio = /radio|checkbox/.test(type)\r\n  const isSelect = type === 'select'\r\n  const isInput = /file|password|^text$|email|number|radio|checkbox/.test(type)\r\n  const isRadio = type === 'radio'\r\n  const isTextArea = type === 'textarea'\r\n  const invalid = !noValidate && touched && error\r\n  const isWarning = !noValidate && touched && warning && !invalid\r\n  const valid = !noValidate && touched && !invalid\r\n  const id = Math.random(32).toString().slice(2)\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      onDestoy && onDestoy()\r\n    }\r\n  }, [onDestoy])\r\n\r\n  return (\r\n    <div className={\r\n      (asyncValidating ? ' async-validating ' : '') +\r\n      ' form-group ' +\r\n      (isCheckRadio ? ' form-check ' : '')\r\n    }>\r\n      {!isCheckRadio && <label htmlFor={id}>{label}</label>}\r\n      <div style={{ position: 'relative' }}>\r\n        {blockInput && <div style={{\r\n          position: 'absolute',\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          zIndex: 9999,\r\n        }}></div>}\r\n        {isInput && <input\r\n          id={id}\r\n          className={\r\n            (!isRadio && invalid ? ' is-invalid ' : ' ') +\r\n            (!isRadio && valid ? ' is-valid ' : ' ') +\r\n            (!isCheckRadio ? ' form-control ' : ' form-check-input ') + \r\n            ' bg-transparent '\r\n          }\r\n          {...input}\r\n          placeholder={label}\r\n          type={type} />}\r\n\r\n        {isSelect && <select\r\n          id={id}\r\n          className={\r\n            (invalid ? ' is-invalid ' : ' ') +\r\n            (valid ? ' is-valid ' : ' ') +\r\n            ' form-control '}\r\n          {...input}\r\n        >\r\n          {children}\r\n        </select>}\r\n\r\n        {isTextArea && <textarea\r\n          id={label}\r\n          className={\r\n            (invalid ? ' is-invalid ' : ' ') +\r\n            (valid ? ' is-valid ' : ' ') +\r\n            ' form-control '}\r\n          {...input}\r\n        ></textarea>}\r\n\r\n        {isCheckRadio && <label\r\n          className=\"form-check-label\"\r\n          htmlFor={id}>{label}</label>\r\n        }\r\n\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n\r\n        {!isRadio && invalid && <div className=\"invalid-feedback\">{error}</div>}\r\n        {!isRadio && isWarning && <small>{warning}</small>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RenderField","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { /*asyncValidator,*/ syncValidator } from '../../utils'\r\nimport {  RenderField } from '../shared'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    .min(18, 'Sorry, you must be at least 18 years old')\r\n});\r\n\r\nconst warningSchema = yup.object().shape({\r\n  age: yup\r\n    .number()\r\n    .min(19, 'Hmm, you seem a bit young...')\r\n})\r\n\r\n\r\n\r\nconst SyncValidationFormYup = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidationYup',\r\n  validate: syncValidator(validationSchema),\r\n  warn: syncValidator(warningSchema)\r\n  // asyncValidate: asyncValidator(schema)\r\n})(SyncValidationFormYup)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { /*asyncValidator,*/ syncValidator } from '../../utils'\r\nimport {  RenderField } from '../shared'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    .min(18, 'Sorry, you must be at least 18 years old')\r\n});\r\n\r\nconst warningSchema = yup.object().shape({\r\n  age: yup\r\n    .number()\r\n    .min(19, 'Hmm, you seem a bit young...')\r\n})\r\n\r\n\r\n\r\nconst SyncValidationFormYup = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidationYup',\r\n  validate: syncValidator(validationSchema),\r\n  warn: syncValidator(warningSchema)\r\n  // asyncValidate: asyncValidator(schema)\r\n})(SyncValidationFormYup)\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\n\r\nconst SimpleForm = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return <form\r\n    className=\"mt-3\"\r\n    noValidate\r\n    onSubmit={handleSubmit}>\r\n\r\n    <div className=\"form-group\">\r\n      <label htmlFor=\"firstName\">First Name</label>\r\n      <Field\r\n        id=\"firstName\"\r\n        placeholder=\"First Name\"\r\n        className=\"form-control\"\r\n        name=\"firstName\"\r\n        component=\"input\"\r\n        type=\"text\"\r\n      />\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"lastName\">Last Name</label>\r\n      <Field\r\n        id=\"lastName\"\r\n        placeholder=\"Last Name\"\r\n        className=\"form-control\"\r\n        name=\"lastName\"\r\n        component=\"input\"\r\n        type=\"text\" />\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"email\">Email</label>\r\n      <Field\r\n        id=\"email\"\r\n        placeholder=\"Email\"\r\n        className=\"form-control\"\r\n        name=\"email\"\r\n        component=\"input\"\r\n        type=\"email\" />\r\n    </div>\r\n\r\n    <div >\r\n      <label>Sex</label>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"male\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"male\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"male\">Male</label>\r\n      </div>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"female\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"female\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"female\">Female</label>\r\n      </div>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"other\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"other\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"other\">Other</label>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"favoriteColor\">Favorite Color</label>\r\n      <div>\r\n        <Field\r\n          className=\"form-control\"\r\n          id=\"favoriteColor\"\r\n          name=\"favoriteColor\"\r\n          component=\"select\">\r\n          <option />\r\n          <option value=\"ff0000\">Red</option>\r\n          <option value=\"00ff00\">Green</option>\r\n          <option value=\"0000ff\">Blue</option>\r\n        </Field>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"form-group form-check\">\r\n      <Field\r\n        id=\"employed\"\r\n        className=\"form-check-input\"\r\n        name=\"employed\"\r\n        component=\"input\"\r\n        type=\"checkbox\" />\r\n      <label\r\n        className=\"form-check-label\"\r\n        htmlFor=\"employed\">Employed</label>\r\n    </div>\r\n\r\n    <div className=\"form-group\">\r\n      <label htmlFor=\"notes\">Notes</label>\r\n      <div>\r\n        <Field\r\n          className=\"form-control\"\r\n          id=\"notes\"\r\n          name=\"notes\"\r\n          component=\"textarea\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"mt-3\">\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting}\r\n        className=\"btn btn-secondary\">Submit</button>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting} onClick={reset}\r\n        className=\"btn btn-light ml-3\">Clear</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nexport default reduxForm({ form: 'simple' })(SimpleForm)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\n\r\nconst SimpleForm = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return <form\r\n    className=\"mt-3\"\r\n    noValidate\r\n    onSubmit={handleSubmit}>\r\n\r\n    <div className=\"form-group\">\r\n      <label htmlFor=\"firstName\">First Name</label>\r\n      <Field\r\n        id=\"firstName\"\r\n        placeholder=\"First Name\"\r\n        className=\"form-control\"\r\n        name=\"firstName\"\r\n        component=\"input\"\r\n        type=\"text\"\r\n      />\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"lastName\">Last Name</label>\r\n      <Field\r\n        id=\"lastName\"\r\n        placeholder=\"Last Name\"\r\n        className=\"form-control\"\r\n        name=\"lastName\"\r\n        component=\"input\"\r\n        type=\"text\" />\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"email\">Email</label>\r\n      <Field\r\n        id=\"email\"\r\n        placeholder=\"Email\"\r\n        className=\"form-control\"\r\n        name=\"email\"\r\n        component=\"input\"\r\n        type=\"email\" />\r\n    </div>\r\n\r\n    <div >\r\n      <label>Sex</label>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"male\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"male\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"male\">Male</label>\r\n      </div>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"female\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"female\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"female\">Female</label>\r\n      </div>\r\n      <div className=\"form-group form-check\">\r\n        <Field\r\n          id=\"other\"\r\n          className=\"form-check-input\"\r\n          name=\"sex\"\r\n          component=\"input\"\r\n          type=\"radio\"\r\n          value=\"other\" />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"other\">Other</label>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"form-group mt-3\">\r\n      <label htmlFor=\"favoriteColor\">Favorite Color</label>\r\n      <div>\r\n        <Field\r\n          className=\"form-control\"\r\n          id=\"favoriteColor\"\r\n          name=\"favoriteColor\"\r\n          component=\"select\">\r\n          <option />\r\n          <option value=\"ff0000\">Red</option>\r\n          <option value=\"00ff00\">Green</option>\r\n          <option value=\"0000ff\">Blue</option>\r\n        </Field>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"form-group form-check\">\r\n      <Field\r\n        id=\"employed\"\r\n        className=\"form-check-input\"\r\n        name=\"employed\"\r\n        component=\"input\"\r\n        type=\"checkbox\" />\r\n      <label\r\n        className=\"form-check-label\"\r\n        htmlFor=\"employed\">Employed</label>\r\n    </div>\r\n\r\n    <div className=\"form-group\">\r\n      <label htmlFor=\"notes\">Notes</label>\r\n      <div>\r\n        <Field\r\n          className=\"form-control\"\r\n          id=\"notes\"\r\n          name=\"notes\"\r\n          component=\"textarea\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"mt-3\">\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting}\r\n        className=\"btn btn-secondary\">Submit</button>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting} onClick={reset}\r\n        className=\"btn btn-light ml-3\">Clear</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nexport default reduxForm({ form: 'simple' })(SimpleForm)\r\n\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport {  RenderField } from '../shared'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.username) {\r\n    errors.username = 'Required'\r\n  } else if (values.username.length > 15) {\r\n    errors.username = 'Must be 15 characters or less'\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  if (!values.age) {\r\n    errors.age = 'Required'\r\n  } else if (isNaN(Number(values.age))) {\r\n    errors.age = 'Must be a number'\r\n  } else if (Number(values.age) < 18) {\r\n    errors.age = 'Sorry, you must be at least 18 years old'\r\n  }\r\n  return errors\r\n}\r\n\r\nconst warn = values => {\r\n  const warnings = {}\r\n  if (values.age < 19) {\r\n    warnings.age = 'Hmm, you seem a bit young...'\r\n  }\r\n  return warnings\r\n}\r\n\r\nconst SyncValidationForm = ({handleSubmit, pristine, reset, submitting}) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <Field name=\"email\" type=\"email\" component={RenderField} label=\"Email\" />\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <Field name=\"age\" type=\"number\" component={RenderField} label=\"Age\" />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidation',\r\n  validate,\r\n  warn\r\n})(SyncValidationForm)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport {  RenderField } from '../shared'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.username) {\r\n    errors.username = 'Required'\r\n  } else if (values.username.length > 15) {\r\n    errors.username = 'Must be 15 characters or less'\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  if (!values.age) {\r\n    errors.age = 'Required'\r\n  } else if (isNaN(Number(values.age))) {\r\n    errors.age = 'Must be a number'\r\n  } else if (Number(values.age) < 18) {\r\n    errors.age = 'Sorry, you must be at least 18 years old'\r\n  }\r\n  return errors\r\n}\r\n\r\nconst warn = values => {\r\n  const warnings = {}\r\n  if (values.age < 19) {\r\n    warnings.age = 'Hmm, you seem a bit young...'\r\n  }\r\n  return warnings\r\n}\r\n\r\nconst SyncValidationForm = ({handleSubmit, pristine, reset, submitting}) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <Field name=\"email\" type=\"email\" component={RenderField} label=\"Email\" />\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <Field name=\"age\" type=\"number\" component={RenderField} label=\"Age\" />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidation',\r\n  validate,\r\n  warn\r\n})(SyncValidationForm)\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { RenderField } from '../shared'\r\nimport {\r\n  alphaNumeric,\r\n  aol,\r\n  email,\r\n  maxLength,\r\n  minLength,\r\n  russianPhoneNumberPattern,\r\n  minValue,\r\n  number,\r\n  required,\r\n  tooYoung\r\n} from '../../utils'\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst maxLength15 = maxLength(15, 'Must be ${max} characters or less, current length is ${length} and the current value is \\' ${value}\\'')\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst minLength2 = minLength(2, 'Must be ${min} characters or more, current length is ${length} and the current value is \\' ${value}\\'')\r\nconst userNameRequired = required('Username is required')\r\nconst userNameAlphaNumeric = alphaNumeric('Only alphanumeric characters in username are allowed')\r\nconst phoneNumberRequired = required('Phone number is required')\r\nconst userRussianPhoneNumberPattern = russianPhoneNumberPattern()\r\nconst userEmail = email()\r\nconst userDeprecetedMail = aol()\r\nconst userEmailRequired = required('Email is required')\r\nconst minValue13 = minValue(13)\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst userTooYoung = tooYoung(16, 'You have met the minimum age requirement! But it\\'s better to be ${age}')\r\nconst userAgeRequired = required('Age is required')\r\nconst ageNumber = number()\r\n\r\n\r\nconst FieldLevelValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n          validate={[userNameRequired, maxLength15, minLength2]}\r\n          warn={userNameAlphaNumeric}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\"\r\n          validate={[userEmailRequired, userEmail]}\r\n          warn={userDeprecetedMail} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\"\r\n          validate={[userAgeRequired, ageNumber, minValue13]}\r\n          warn={userTooYoung} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"phone\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Phone number\"\r\n          validate={[phoneNumberRequired, userRussianPhoneNumberPattern]} />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'fieldLevelValidation',\r\n})(FieldLevelValidation)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { RenderField } from '../shared'\r\nimport {\r\n  alphaNumeric,\r\n  aol,\r\n  email,\r\n  maxLength,\r\n  minLength,\r\n  russianPhoneNumberPattern,\r\n  minValue,\r\n  number,\r\n  required,\r\n  tooYoung\r\n} from '../../utils'\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst maxLength15 = maxLength(15, 'Must be \\${max} characters or less, current length is \\${length} and the current value is \\' \\${value}\\'')\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst minLength2 = minLength(2, 'Must be \\${min} characters or more, current length is \\${length} and the current value is \\' \\${value}\\'')\r\nconst userNameRequired = required('Username is required')\r\nconst userNameAlphaNumeric = alphaNumeric('Only alphanumeric characters in username are allowed')\r\nconst phoneNumberRequired = required('Phone number is required')\r\nconst userRussianPhoneNumberPattern = russianPhoneNumberPattern()\r\nconst userEmail = email()\r\nconst userDeprecetedMail = aol()\r\nconst userEmailRequired = required('Email is required')\r\nconst minValue13 = minValue(13)\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst userTooYoung = tooYoung(16, 'You have met the minimum age requirement! But it\\'s better to be \\${age}')\r\nconst userAgeRequired = required('Age is required')\r\nconst ageNumber = number()\r\n\r\n\r\nconst FieldLevelValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n          validate={[userNameRequired, maxLength15, minLength2]}\r\n          warn={userNameAlphaNumeric}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\"\r\n          validate={[userEmailRequired, userEmail]}\r\n          warn={userDeprecetedMail} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\"\r\n          validate={[userAgeRequired, ageNumber, minValue13]}\r\n          warn={userTooYoung} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"phone\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Phone number\"\r\n          validate={[phoneNumberRequired, userRussianPhoneNumberPattern]} />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'fieldLevelValidation',\r\n})(FieldLevelValidation)\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { syncValidator } from '../../utils'\r\nimport { RenderField } from '../shared'\r\nimport {\r\n  alphaNumeric,\r\n  aol,\r\n  // email,\r\n  // maxLength,\r\n  minLength,\r\n  russianPhoneNumberPattern,\r\n  minValue,\r\n  // number,\r\n  required,\r\n  tooYoung\r\n} from '../../utils'\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\n// const maxLength15 = maxLength(15, 'Must be ${max} characters or less, current length is ${length} and the current value is \\' ${value}\\'')\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst minLength2 = minLength(2, 'Must be ${min} characters or more, current length is ${length} and the current value is \\' ${value}\\'')\r\n// const userNameRequired = required('Username is required')\r\nconst userNameAlphaNumeric = alphaNumeric('Only alphanumeric characters in username are allowed')\r\nconst phoneNumberRequired = required('Phone number is required')\r\nconst userRussianPhoneNumberPattern = russianPhoneNumberPattern()\r\n// const userEmail = email()\r\nconst userDeprecetedMail = aol()\r\nconst userEmailRequired = required('Email is required')\r\nconst minValue13 = minValue(13)\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst userTooYoung = tooYoung(16, 'You have met the minimum age requirement! But it\\'s better to be ${age}')\r\nconst userAgeRequired = required('Age is required')\r\n// const ageNumber = number()\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Username is required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less'),\r\n  email: yup\r\n    .string()\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    // .required('Required')\r\n    .typeError('Only number is acceptable')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    // .min(18, 'Sorry, you must be at least 18 years old')\r\n});\r\n\r\n\r\nconst MixedSyncValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n          validate={[ minLength2]}\r\n          warn={userNameAlphaNumeric}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\"\r\n          validate={[userEmailRequired]}\r\n          warn={userDeprecetedMail} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\"\r\n          validate={[userAgeRequired, minValue13]}\r\n          warn={userTooYoung} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"phone\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Phone number\"\r\n          validate={[phoneNumberRequired, userRussianPhoneNumberPattern]} />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'mixedSyncValidation',\r\n  validate: syncValidator(validationSchema)\r\n})(MixedSyncValidation)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { syncValidator } from '../../utils'\r\nimport { RenderField } from '../shared'\r\nimport {\r\n  alphaNumeric,\r\n  aol,\r\n  // email,\r\n  // maxLength,\r\n  minLength,\r\n  russianPhoneNumberPattern,\r\n  minValue,\r\n  // number,\r\n  required,\r\n  tooYoung\r\n} from '../../utils'\r\n\r\n// eslint-disable-next-line no-template-curly-in-string\r\n// const maxLength15 = maxLength(15, 'Must be \\${max} characters or less, current length is \\${length} and the current value is \\' \\${value}\\'')\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst minLength2 = minLength(2, 'Must be \\${min} characters or more, current length is \\${length} and the current value is \\' \\${value}\\'')\r\n// const userNameRequired = required('Username is required')\r\nconst userNameAlphaNumeric = alphaNumeric('Only alphanumeric characters in username are allowed')\r\nconst phoneNumberRequired = required('Phone number is required')\r\nconst userRussianPhoneNumberPattern = russianPhoneNumberPattern()\r\n// const userEmail = email()\r\nconst userDeprecetedMail = aol()\r\nconst userEmailRequired = required('Email is required')\r\nconst minValue13 = minValue(13)\r\n// eslint-disable-next-line no-template-curly-in-string\r\nconst userTooYoung = tooYoung(16, 'You have met the minimum age requirement! But it\\'s better to be \\${age}')\r\nconst userAgeRequired = required('Age is required')\r\n// const ageNumber = number()\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Username is required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less'),\r\n  email: yup\r\n    .string()\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    // .required('Required')\r\n    .typeError('Only number is acceptable')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    // .min(18, 'Sorry, you must be at least 18 years old')\r\n});\r\n\r\n\r\nconst MixedSyncValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n          validate={[ minLength2]}\r\n          warn={userNameAlphaNumeric}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\"\r\n          validate={[userEmailRequired]}\r\n          warn={userDeprecetedMail} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\"\r\n          validate={[userAgeRequired, minValue13]}\r\n          warn={userTooYoung} />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"phone\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Phone number\"\r\n          validate={[phoneNumberRequired, userRussianPhoneNumberPattern]} />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'mixedSyncValidation',\r\n  validate: syncValidator(validationSchema)\r\n})(MixedSyncValidation)\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator, asyncValidate } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .min(2, 'Must be ${min} characters or more'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n});\r\n\r\nconst AsyncBlurValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'asyncBlurValidation',\r\n  validate: syncValidator(validationSchema),\r\n  asyncValidate: asyncValidate,\r\n  asyncBlurFields: ['username', 'email', 'age'],\r\n  persistentSubmitErrors: true\r\n})(AsyncBlurValidation)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator, asyncValidate } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .min(2, 'Must be \\${min} characters or more'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n});\r\n\r\nconst AsyncBlurValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'asyncBlurValidation',\r\n  validate: syncValidator(validationSchema),\r\n  asyncValidate: asyncValidate,\r\n  asyncBlurFields: ['username', 'email', 'age'],\r\n  persistentSubmitErrors: true\r\n})(AsyncBlurValidation)\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator, asyncValidate } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .min(2, 'Must be ${min} characters or more'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n});\r\n\r\nconst AsyncChangeValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'asyncChangeValidation',\r\n  validate: syncValidator(validationSchema),\r\n  asyncValidate: asyncValidate,\r\n  asyncChangeFields: ['username', 'email', 'age'],\r\n  persistentSubmitErrors: true\r\n})(AsyncChangeValidation)\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator, asyncValidate } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .min(2, 'Must be \\${min} characters or more'),\r\n  email: yup\r\n    .string()\r\n    .required('Required')\r\n    .email('Invalid email address'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n});\r\n\r\nconst AsyncChangeValidation = ({ handleSubmit, pristine, reset, submitting }) => {\r\n  return (\r\n    <form\r\n      noValidate\r\n      onSubmit={handleSubmit}>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Username\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"email\"\r\n          type=\"email\"\r\n          component={RenderField}\r\n          label=\"Email\" />\r\n      </div>\r\n\r\n      <div className=\"mt-3\">\r\n        <Field\r\n          name=\"age\"\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label=\"Age\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'asyncChangeValidation',\r\n  validate: syncValidator(validationSchema),\r\n  asyncValidate: asyncValidate,\r\n  asyncChangeFields: ['username', 'email', 'age'],\r\n  persistentSubmitErrors: true\r\n})(AsyncChangeValidation)`","import React from 'react'\r\nimport  './ErrorMessage.css'\r\n\r\n\r\nconst ErrorMessage = ({ meta }) =>\r\n  <div className=\"error-message\">{meta.error && meta.touched && 'Please select an option first'}</div>\r\n\r\nexport default ErrorMessage ","import { createSelector } from 'reselect'\r\n\r\nexport const userState = state => state.user\r\n\r\nexport const getUserAccount = createSelector(\r\n  userState,\r\n  userState => userState.account\r\n)\r\n\r\nexport const getUserColors = createSelector(\r\n  userState,\r\n  userState => userState.colors\r\n)\r\n\r\nexport const getUserClubInfo = createSelector(\r\n  userState,\r\n  userState => userState.clubInfo\r\n)\r\n\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator } from '../../utils';\r\nimport ErrorMessage from '../shared/ErrorMessage/ErrorMessage';\r\nimport { getUserColors, getUserAccount } from '../../store/selectors/user';\r\nimport { userDataSuccess } from '../../store/actions';\r\nimport { userAccount as mockUserAccount } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  firstName: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less'),\r\n  lastName: yup\r\n    .string()\r\n    .required('Required'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    .min(18, 'Sorry, you must be at least 18 years old'),\r\n  sex: yup\r\n    .string()\r\n    .required('Required'),\r\n  favoriteColor: yup\r\n    .string()\r\n    .required('Required'),\r\n  agreement: yup\r\n    .boolean()\r\n    .test(\r\n      'is-agreement',\r\n      'Required',\r\n      value => !!value\r\n    )\r\n});\r\n\r\nlet InitializeFromState = ({\r\n  colors,\r\n  handleSubmit,\r\n  load,\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  userAccount\r\n}) => {\r\n  const isAccount = !!Object.keys(userAccount).length\r\n  return (\r\n    <>\r\n      <div>\r\n        <button className=\"btn btn-secondary\" type=\"button\" onClick={() => load(mockUserAccount)}>\r\n          Load Account\r\n        </button>\r\n      </div>\r\n      <form\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <fieldset disabled={!isAccount || submitting}>\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"First Name\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Last Name\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"age\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Age\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <label>Sex</label>\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"male\"\r\n              component={RenderField}\r\n              label=\"Male\" />\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"female\"\r\n              component={RenderField}\r\n              label=\"Female\" />\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"other\"\r\n              component={RenderField}\r\n              label=\"Other\" />\r\n\r\n            <Field name=\"sex\" component={ErrorMessage} />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              label=\"Favorite Color\"\r\n              name=\"favoriteColor\"\r\n              type=\"select\"\r\n              component={RenderField}>\r\n              <option />\r\n              {colors && colors.map((color, i) => (\r\n                <option key={color + i} value={color}>{color}</option>\r\n              ))}\r\n            </Field>\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"employed\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Employed\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"bio\"\r\n              type=\"textarea\"\r\n              component={RenderField}\r\n              label=\"Bio\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"agreement\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Agreement with something terrible\" />\r\n          </div>\r\n\r\n          <div>\r\n            <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n              Submit\r\n        </button>\r\n            <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n              Clear Values\r\n        </button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  colors: getUserColors(state),\r\n  userAccount: getUserAccount(state),\r\n  initialValues: getUserAccount(state),\r\n})\r\n\r\nInitializeFromState = reduxForm({\r\n  form: 'initializeFromState',\r\n  validate: syncValidator(validationSchema),\r\n  enableReinitialize: true\r\n})(InitializeFromState)\r\n\r\nInitializeFromState = connect(\r\n  mapStateToProps,\r\n  { load: userDataSuccess }\r\n)(InitializeFromState)\r\n\r\nexport default InitializeFromState\r\n\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator } from '../../utils';\r\nimport ErrorMessage from '../shared/ErrorMessage/ErrorMessage';\r\nimport { getUserColors, getUserAccount } from '../../store/selectors/user';\r\nimport { userDataSuccess } from '../../store/actions';\r\nimport { userAccount as mockUserAccount } from '../../utils'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  firstName: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less'),\r\n  lastName: yup\r\n    .string()\r\n    .required('Required'),\r\n  age: yup\r\n    .number()\r\n    .typeError('Only number is acceptable')\r\n    .required('Required')\r\n    .positive('Only positive number is acceptable')\r\n    .integer('Only integer number is acceptable')\r\n    .min(18, 'Sorry, you must be at least 18 years old'),\r\n  sex: yup\r\n    .string()\r\n    .required('Required'),\r\n  favoriteColor: yup\r\n    .string()\r\n    .required('Required'),\r\n  agreement: yup\r\n    .boolean()\r\n    .test(\r\n      'is-agreement',\r\n      'Required',\r\n      value => !!value\r\n    )\r\n});\r\n\r\nlet InitializeFromState = ({\r\n  colors,\r\n  handleSubmit,\r\n  load,\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  userAccount\r\n}) => {\r\n  const isAccount = !!Object.keys(userAccount).length\r\n  return (\r\n    <>\r\n      <div>\r\n        <button className=\"btn btn-secondary\" type=\"button\" onClick={() => load(mockUserAccount)}>\r\n          Load Account\r\n        </button>\r\n      </div>\r\n      <form\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <fieldset disabled={!isAccount || submitting}>\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"First Name\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Last Name\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"age\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Age\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <label>Sex</label>\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"male\"\r\n              component={RenderField}\r\n              label=\"Male\" />\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"female\"\r\n              component={RenderField}\r\n              label=\"Female\" />\r\n            <Field\r\n              name=\"sex\"\r\n              type=\"radio\"\r\n              value=\"other\"\r\n              component={RenderField}\r\n              label=\"Other\" />\r\n\r\n            <Field name=\"sex\" component={ErrorMessage} />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              label=\"Favorite Color\"\r\n              name=\"favoriteColor\"\r\n              type=\"select\"\r\n              component={RenderField}>\r\n              <option />\r\n              {colors && colors.map((color, i) => (\r\n                <option key={color + i} value={color}>{color}</option>\r\n              ))}\r\n            </Field>\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"employed\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Employed\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"bio\"\r\n              type=\"textarea\"\r\n              component={RenderField}\r\n              label=\"Bio\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"agreement\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Agreement with something terrible\" />\r\n          </div>\r\n\r\n          <div>\r\n            <button type=\"submit\" className=\"btn btn-secondary\" disabled={submitting}>\r\n              Submit\r\n        </button>\r\n            <button type=\"button\" className=\"btn btn-light ml-3\" disabled={pristine || submitting} onClick={reset}>\r\n              Clear Values\r\n        </button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  colors: getUserColors(state),\r\n  userAccount: getUserAccount(state),\r\n  initialValues: getUserAccount(state),\r\n})\r\n\r\nInitializeFromState = reduxForm({\r\n  form: 'initializeFromState',\r\n  validate: syncValidator(validationSchema),\r\n  enableReinitialize: true\r\n})(InitializeFromState)\r\n\r\nInitializeFromState = connect(\r\n  mapStateToProps,\r\n  { load: userDataSuccess }\r\n)(InitializeFromState)\r\n\r\nexport default InitializeFromState\r\n\r\n`","import React, { useCallback } from 'react'\r\nimport { Field, reduxForm, formValueSelector } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator } from '../../utils'\r\nimport { getUserColors } from '../../store/selectors/user'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  nickname: yup\r\n    .string()\r\n    .when('$nicknameRequired', (nicknameRequired, schema) =>\r\n      (nicknameRequired ? schema.required('Required') : schema.required('Required'))),\r\n  firstName: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be ${max} characters or less'),\r\n  lastName: yup\r\n    .string()\r\n    .required('Required'),\r\n  hasEmail: yup\r\n    .boolean(),\r\n  email: yup\r\n    .string()\r\n    .email('Invalid email')\r\n    .when('hasEmail', {\r\n      is: true,\r\n      then: yup.string().required('Required'),\r\n      otherwise: yup.string()\r\n    }),\r\n  favoriteColor: yup\r\n    .string()\r\n    .required('Required'),\r\n  agreement: yup\r\n    .boolean()\r\n    .test(\r\n      'is-agreement',\r\n      'Required',\r\n      value => !!value\r\n    )\r\n});\r\n\r\nlet SelectingFormValues = ({\r\n  colors,\r\n  handleSubmit,\r\n  hasEmailValue,\r\n  favoriteColorValue,\r\n  context: { nicknameRequired },\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  resetSection\r\n}) => {\r\n  const memorizedDestroyEmail = useCallback(() => { resetSection('email') }, [resetSection])\r\n  return (\r\n    <>\r\n      <form\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <fieldset disabled={submitting}>\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate={!nicknameRequired}\r\n              name=\"nickname\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Nickname\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"First Name\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Last Name\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"hasEmail\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Has email?\" />\r\n          </div>\r\n\r\n          {hasEmailValue && <div className=\"mt-3\">\r\n            <Field\r\n              onDestoy={memorizedDestroyEmail}\r\n              name=\"email\"\r\n              type=\"email\"\r\n              component={RenderField}\r\n              label=\"Email\" />\r\n          </div>}\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              label=\"Favorite Color\"\r\n              name=\"favoriteColor\"\r\n              type=\"select\"\r\n              component={RenderField}>\r\n              <option />\r\n              {colors && colors.map((color, i) => (\r\n                <option key={color + i} value={color}>{color}</option>\r\n              ))}\r\n            </Field>\r\n          </div>\r\n\r\n          {favoriteColorValue && (\r\n            <div\r\n              style={{\r\n                height: 80,\r\n                width: 200,\r\n                margin: '10px auto',\r\n                backgroundColor: favoriteColorValue\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"agreement\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Agreement with something terrible\" />\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-secondary\"\r\n              disabled={submitting}>\r\n              Submit\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light ml-3\"\r\n              disabled={pristine || submitting}\r\n              onClick={reset}>\r\n              Clear Values\r\n            </button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nconst selector = formValueSelector('selectingFormValues')\r\n\r\nconst mapStateToProps = state => ({\r\n  colors: getUserColors(state),\r\n  hasEmailValue: selector(state, 'hasEmail'),\r\n  favoriteColorValue: selector(state, 'favoriteColor')\r\n})\r\n\r\nSelectingFormValues = reduxForm({\r\n  form: 'selectingFormValues',\r\n  validate: syncValidator(validationSchema),\r\n  touchOnChange: true\r\n})(SelectingFormValues)\r\n\r\n\r\nSelectingFormValues = connect(\r\n  mapStateToProps,\r\n)(SelectingFormValues)\r\n\r\nexport default SelectingFormValues\r\n\r\nexport const listing = `\r\nimport React, { useCallback } from 'react'\r\nimport { Field, reduxForm, formValueSelector } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { RenderField } from '../shared'\r\nimport { syncValidator } from '../../utils'\r\nimport { getUserColors } from '../../store/selectors/user'\r\n\r\nconst validationSchema = yup.object().shape({\r\n  nickname: yup\r\n    .string()\r\n    .when('$nicknameRequired', (nicknameRequired, schema) =>\r\n      (nicknameRequired ? schema.required('Required') : schema.required('Required'))),\r\n  firstName: yup\r\n    .string()\r\n    .required('Required')\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    .max(15, 'Must be \\${max} characters or less'),\r\n  lastName: yup\r\n    .string()\r\n    .required('Required'),\r\n  hasEmail: yup\r\n    .boolean(),\r\n  email: yup\r\n    .string()\r\n    .email('Invalid email')\r\n    .when('hasEmail', {\r\n      is: true,\r\n      then: yup.string().required('Required'),\r\n      otherwise: yup.string()\r\n    }),\r\n  favoriteColor: yup\r\n    .string()\r\n    .required('Required'),\r\n  agreement: yup\r\n    .boolean()\r\n    .test(\r\n      'is-agreement',\r\n      'Required',\r\n      value => !!value\r\n    )\r\n});\r\n\r\nlet SelectingFormValues = ({\r\n  colors,\r\n  handleSubmit,\r\n  hasEmailValue,\r\n  favoriteColorValue,\r\n  context: { nicknameRequired },\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  resetSection\r\n}) => {\r\n  const memorizedDestroyEmail = useCallback(() => { resetSection('email') }, [resetSection])\r\n  return (\r\n    <>\r\n      <form\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <fieldset disabled={submitting}>\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate={!nicknameRequired}\r\n              name=\"nickname\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Nickname\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"First Name\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              component={RenderField}\r\n              label=\"Last Name\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              noValidate\r\n              name=\"hasEmail\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Has email?\" />\r\n          </div>\r\n\r\n          {hasEmailValue && <div className=\"mt-3\">\r\n            <Field\r\n              onDestoy={memorizedDestroyEmail}\r\n              name=\"email\"\r\n              type=\"email\"\r\n              component={RenderField}\r\n              label=\"Email\" />\r\n          </div>}\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              label=\"Favorite Color\"\r\n              name=\"favoriteColor\"\r\n              type=\"select\"\r\n              component={RenderField}>\r\n              <option />\r\n              {colors && colors.map((color, i) => (\r\n                <option key={color + i} value={color}>{color}</option>\r\n              ))}\r\n            </Field>\r\n          </div>\r\n\r\n          {favoriteColorValue && (\r\n            <div\r\n              style={{\r\n                height: 80,\r\n                width: 200,\r\n                margin: '10px auto',\r\n                backgroundColor: favoriteColorValue\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"mt-3\">\r\n            <Field\r\n              name=\"agreement\"\r\n              type=\"checkbox\"\r\n              component={RenderField}\r\n              label=\"Agreement with something terrible\" />\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-secondary\"\r\n              disabled={submitting}>\r\n              Submit\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light ml-3\"\r\n              disabled={pristine || submitting}\r\n              onClick={reset}>\r\n              Clear Values\r\n            </button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nconst selector = formValueSelector('selectingFormValues')\r\n\r\nconst mapStateToProps = state => ({\r\n  colors: getUserColors(state),\r\n  hasEmailValue: selector(state, 'hasEmail'),\r\n  favoriteColorValue: selector(state, 'favoriteColor')\r\n})\r\n\r\nSelectingFormValues = reduxForm({\r\n  form: 'selectingFormValues',\r\n  validate: syncValidator(validationSchema),\r\n  touchOnChange: true\r\n})(SelectingFormValues)\r\n\r\n\r\nSelectingFormValues = connect(\r\n  mapStateToProps,\r\n)(SelectingFormValues)\r\n\r\nexport default SelectingFormValues\r\n\r\n`","export default {\r\n  MEMBER: 'member',\r\n}","import React from 'react'\r\nimport { Field } from 'redux-form'\r\nimport { RenderField } from '../../shared'\r\n\r\n\r\nconst RenderHobbies = ({ blockInput, fields, maxHobbiesLength, meta: { error, warning } }) => {\r\n  return (<ul className=\"list-group\">\r\n    <li className=\"list-group-item bg-transparent\">\r\n      <button\r\n        disabled={fields.length >= maxHobbiesLength}\r\n        className=\"btn btn-secondary\"\r\n        type=\"button\"\r\n        onClick={() => fields.push()}\r\n      >\r\n        Add Hobby\r\n      </button>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {warning && <div className=\"warning-message\">{warning}</div>}\r\n    </li>\r\n\r\n    {fields.map((hobby, index) => (\r\n      <li className=\"list-group-item\" key={index}>\r\n        <button\r\n          className=\"close\"\r\n          type=\"button\"\r\n          title=\"Remove Hobby\"\r\n          onClick={() => fields.remove(index)}\r\n        >\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <Field\r\n          blockInput={blockInput}\r\n          name={hobby}\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label={`Hobby #${index + 1}`}\r\n        />\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\nexport default RenderHobbies\r\n\r\nexport const listing = `\r\nimport React from 'react'\r\nimport { Field } from 'redux-form'\r\nimport { RenderField } from '../../shared'\r\n\r\n\r\nconst RenderHobbies = ({ blockInput, fields, maxHobbiesLength, meta: { error, warning } }) => {\r\n  return (<ul className=\"list-group\">\r\n    <li className=\"list-group-item bg-transparent\">\r\n      <button\r\n        disabled={fields.length >= maxHobbiesLength}\r\n        className=\"btn btn-secondary\"\r\n        type=\"button\"\r\n        onClick={() => fields.push()}\r\n      >\r\n        Add Hobby\r\n      </button>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {warning && <div className=\"warning-message\">{warning}</div>}\r\n    </li>\r\n\r\n    {fields.map((hobby, index) => (\r\n      <li className=\"list-group-item\" key={index}>\r\n        <button\r\n          className=\"close\"\r\n          type=\"button\"\r\n          title=\"Remove Hobby\"\r\n          onClick={() => fields.remove(index)}\r\n        >\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <Field\r\n          blockInput={blockInput}\r\n          name={hobby}\r\n          type=\"text\"\r\n          component={RenderField}\r\n          label={\\`Hobby #\\${index + 1}\\`}\r\n        />\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\nexport default RenderHobbies\r\n`","import React, { useCallback, useState } from 'react'\r\nimport { Field, reduxForm, FieldArray, formValueSelector } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { syncValidator } from '../../utils'\r\nimport { RenderField } from '../shared'\r\nimport { userClubInfo as mockUserClubInfo } from '../../utils'\r\nimport { getUserClubInfo } from '../../store/selectors/user';\r\nimport { userClubInfoSuccess } from '../../store/actions';\r\nimport M from '../FieldArraysForm/Member/Member'\r\n\r\nlet Member = M\r\n\r\nconst selector = formValueSelector('fieldArraysForm')\r\n\r\nconst validationSchema = yup\r\n  .object()\r\n  .shape({\r\n    clubName: yup\r\n      .string()\r\n      .required('Club name is required')\r\n      // eslint-disable-next-line no-template-curly-in-string\r\n      .max(25, 'Must be ${max} characters or less')\r\n      // eslint-disable-next-line no-template-curly-in-string\r\n      .min(2, 'Must be ${min} characters or more'),\r\n    members$: yup\r\n      .array()\r\n      .of(yup\r\n        .object()\r\n        .shape({\r\n          firstName: yup\r\n            .string()\r\n            .required('First name is required'),\r\n          lastName: yup\r\n            .string()\r\n            .required('Last name is required'),\r\n          hobbies$: yup\r\n            .array()\r\n            .of(yup\r\n              .string()\r\n              .required('Hobbie is required')\r\n            )\r\n          // .max(4, 'No more than five hobbies allowed')\r\n        })\r\n      )\r\n      // .max(2, 'Max 3 mebmers allowed')\r\n      .required('At least one member must be entered')\r\n  });\r\n\r\nconst warn = (values) => {\r\n  // console.log('values', values)\r\n  const warnings = {}\r\n\r\n  if (!warnings.members$) {\r\n    warnings.members$ = []\r\n  }\r\n\r\n  if (values.members$) {\r\n    const membersArrayWarnings = []\r\n    values.members$.forEach((member, memberIndex) => {\r\n      const memberWarnings = {}\r\n\r\n\r\n      if (member && member.hobbies$ && member.hobbies$.length) {\r\n        if (member.hobbies$.length >= 5) {\r\n          if (!memberWarnings.hobbies$) {\r\n            memberWarnings.hobbies$ = []\r\n          }\r\n          memberWarnings.hobbies$._warning = 'No more than five hobbies allowed'\r\n          membersArrayWarnings[memberIndex] = memberWarnings\r\n        }\r\n      }\r\n\r\n    })\r\n    if (membersArrayWarnings.length) {\r\n      warnings.members$ = [...warnings.members$, ...membersArrayWarnings]\r\n    }\r\n  }\r\n\r\n  if (values.members$ && values.members$.length >= 3) {\r\n    warnings.members$._warning = 'Max 3 mebmers allowed'\r\n  }\r\n\r\n  return warnings\r\n}\r\n\r\nMember = connect(\r\n  (state, props) => ({\r\n    firstName: selector(state, `${props.member}.firstName`),\r\n    lastName: selector(state, `${props.member}.lastName`),\r\n    hobbies: selector(state, `${props.member}.hobbies$`)\r\n  })\r\n)(Member)\r\n\r\nconst RenderMembers = ({\r\n  fields,\r\n  maxHobbiesLength,\r\n  meta: { error, warning, submitFailed }\r\n}) => {\r\n  const allFields = fields.getAll()\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [hoverIndex, setHoverIndex] = useState(0)\r\n  const moveCard = useCallback(\r\n    (dragIndex, hoverIndex) => {\r\n      setHoverIndex(hoverIndex)\r\n      fields.swap(dragIndex, hoverIndex)\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [allFields, fields],\r\n  )\r\n  return (\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item\">\r\n\r\n        <button\r\n          disabled={fields.length >= 3}\r\n          className=\"btn btn-secondary\"\r\n          type=\"button\"\r\n          onClick={() => fields.push({})}\r\n        >\r\n          Add Member\r\n        </button>\r\n\r\n        {submitFailed && error && <div className=\"error-message\">{error}</div>}\r\n        {warning && <div className=\"warning-message\">{warning}</div>}\r\n      </li>\r\n\r\n      <div>\r\n        {fields.map((member, index) =>\r\n          <Member\r\n            highLight={isDragging && index === hoverIndex}\r\n            blockInput={isDragging}\r\n            beginDrag={() => setIsDragging(true)}\r\n            endDrag={() => setIsDragging(false)}\r\n            moveCard={moveCard}\r\n            maxHobbiesLength={maxHobbiesLength}\r\n            member={member}\r\n            fields={fields}\r\n            index={index}\r\n            key={index}\r\n          />)}\r\n      </div>\r\n    </ul>\r\n  )\r\n}\r\n\r\nlet FieldArraysForm = ({\r\n  handleSubmit,\r\n  maxHobbiesLength,\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  load\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          type=\"button\"\r\n          onClick={() => load(mockUserClubInfo)}>\r\n          Load club info\r\n        </button>\r\n      </div>\r\n      <form\r\n        className=\"mt-3\"\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <div className=\"mt-3\">\r\n          <Field\r\n            name=\"clubName\"\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"Club Name\"\r\n          />\r\n        </div>\r\n\r\n        <FieldArray\r\n          maxHobbiesLength={maxHobbiesLength}\r\n          name=\"members$\"\r\n          component={RenderMembers} />\r\n\r\n        <div className=\"mt-3\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={submitting}\r\n            className=\"btn btn-secondary\">Submit</button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={pristine || submitting} onClick={reset}\r\n            className=\"btn btn-light ml-3\">Clear</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  initialValues: getUserClubInfo(state),\r\n})\r\n\r\nFieldArraysForm = reduxForm({\r\n  form: 'fieldArraysForm',\r\n  warn,\r\n  validate: syncValidator(validationSchema),\r\n})(FieldArraysForm)\r\n\r\nFieldArraysForm = connect(\r\n  mapStateToProps,\r\n  { load: userClubInfoSuccess }\r\n)(FieldArraysForm)\r\n\r\nexport default FieldArraysForm\r\n\r\nexport const listing = `\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Field, reduxForm, FieldArray, formValueSelector } from 'redux-form'\r\nimport * as yup from 'yup';\r\nimport { connect } from 'react-redux'\r\nimport { syncValidator } from '../../utils'\r\nimport { RenderField } from '../shared'\r\nimport { userClubInfo as mockUserClubInfo } from '../../utils'\r\nimport { getUserClubInfo } from '../../store/selectors/user';\r\nimport { userClubInfoSuccess } from '../../store/actions';\r\nimport M from '../FieldArraysForm/Member/Member'\r\n\r\nlet Member = M\r\n\r\nconst selector = formValueSelector('fieldArraysForm')\r\n\r\nconst validationSchema = yup\r\n  .object()\r\n  .shape({\r\n    clubName: yup\r\n      .string()\r\n      .required('Club name is required')\r\n      // eslint-disable-next-line no-template-curly-in-string\r\n      .max(25, 'Must be \\${max} characters or less')\r\n      // eslint-disable-next-line no-template-curly-in-string\r\n      .min(2, 'Must be \\${min} characters or more'),\r\n    members$: yup\r\n      .array()\r\n      .of(yup\r\n        .object()\r\n        .shape({\r\n          firstName: yup\r\n            .string()\r\n            .required('First name is required'),\r\n          lastName: yup\r\n            .string()\r\n            .required('Last name is required'),\r\n          hobbies$: yup\r\n            .array()\r\n            .of(yup\r\n              .string()\r\n              .required('Hobbie is required')\r\n            )\r\n          // .max(4, 'No more than five hobbies allowed')\r\n        })\r\n      )\r\n      // .max(2, 'Max 3 mebmers allowed')\r\n      .required('At least one member must be entered')\r\n  });\r\n\r\nconst warn = (values) => {\r\n  // console.log('values', values)\r\n  const warnings = {}\r\n\r\n  if (!warnings.members$) {\r\n    warnings.members$ = []\r\n  }\r\n\r\n  if (values.members$) {\r\n    const membersArrayWarnings = []\r\n    values.members$.forEach((member, memberIndex) => {\r\n      const memberWarnings = {}\r\n\r\n\r\n      if (member && member.hobbies$ && member.hobbies$.length) {\r\n        if (member.hobbies$.length >= 5) {\r\n          if (!memberWarnings.hobbies$) {\r\n            memberWarnings.hobbies$ = []\r\n          }\r\n          memberWarnings.hobbies$._warning = 'No more than five hobbies allowed'\r\n          membersArrayWarnings[memberIndex] = memberWarnings\r\n        }\r\n      }\r\n\r\n    })\r\n    if (membersArrayWarnings.length) {\r\n      warnings.members$ = [...warnings.members$, ...membersArrayWarnings]\r\n    }\r\n  }\r\n\r\n  if (values.members$ && values.members$.length >= 3) {\r\n    warnings.members$._warning = 'Max 3 mebmers allowed'\r\n  }\r\n\r\n  return warnings\r\n}\r\n\r\nMember = connect(\r\n  (state, props) => ({\r\n    firstName: selector(state, \\`\\${props.member}.firstName\\`),\r\n    lastName: selector(state, \\`\\${props.member}.lastName\\`),\r\n    hobbies: selector(state, \\`\\${props.member}.hobbies$\\`)\r\n  })\r\n)(Member)\r\n\r\nconst RenderMembers = ({\r\n  fields,\r\n  maxHobbiesLength,\r\n  meta: { error, warning, submitFailed }\r\n}) => {\r\n  const allFields = fields.getAll()\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [hoverIndex, setHoverIndex] = useState(0)\r\n  const moveCard = useCallback(\r\n    (dragIndex, hoverIndex) => {\r\n      setHoverIndex(hoverIndex)\r\n      fields.swap(dragIndex, hoverIndex)\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [allFields, fields],\r\n  )\r\n  return (\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item\">\r\n\r\n        <button\r\n          disabled={fields.length >= 3}\r\n          className=\"btn btn-secondary\"\r\n          type=\"button\"\r\n          onClick={() => fields.push({})}\r\n        >\r\n          Add Member\r\n        </button>\r\n\r\n        {submitFailed && error && <div className=\"error-message\">{error}</div>}\r\n        {warning && <div className=\"warning-message\">{warning}</div>}\r\n      </li>\r\n\r\n      <div>\r\n        {fields.map((member, index) =>\r\n          <Member\r\n            highLight={isDragging && index === hoverIndex}\r\n            blockInput={isDragging}\r\n            beginDrag={() => setIsDragging(true)}\r\n            endDrag={() => setIsDragging(false)}\r\n            moveCard={moveCard}\r\n            maxHobbiesLength={maxHobbiesLength}\r\n            member={member}\r\n            fields={fields}\r\n            index={index}\r\n            key={index}\r\n          />)}\r\n      </div>\r\n    </ul>\r\n  )\r\n}\r\n\r\nlet FieldArraysForm = ({\r\n  handleSubmit,\r\n  maxHobbiesLength,\r\n  pristine,\r\n  reset,\r\n  submitting,\r\n  load\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          type=\"button\"\r\n          onClick={() => load(mockUserClubInfo)}>\r\n          Load club info\r\n        </button>\r\n      </div>\r\n      <form\r\n        className=\"mt-3\"\r\n        noValidate\r\n        onSubmit={handleSubmit}>\r\n\r\n        <div className=\"mt-3\">\r\n          <Field\r\n            name=\"clubName\"\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"Club Name\"\r\n          />\r\n        </div>\r\n\r\n        <FieldArray\r\n          maxHobbiesLength={maxHobbiesLength}\r\n          name=\"members$\"\r\n          component={RenderMembers} />\r\n\r\n        <div className=\"mt-3\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={submitting}\r\n            className=\"btn btn-secondary\">Submit</button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={pristine || submitting} onClick={reset}\r\n            className=\"btn btn-light ml-3\">Clear</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  initialValues: getUserClubInfo(state),\r\n})\r\n\r\nFieldArraysForm = reduxForm({\r\n  form: 'fieldArraysForm',\r\n  warn,\r\n  validate: syncValidator(validationSchema),\r\n})(FieldArraysForm)\r\n\r\nFieldArraysForm = connect(\r\n  mapStateToProps,\r\n  { load: userClubInfoSuccess }\r\n)(FieldArraysForm)\r\n\r\nexport default FieldArraysForm\r\n`","import React, { useRef } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\nimport MemberTypes from './MemberTypes'\r\nimport { Field, FieldArray } from 'redux-form'\r\nimport { RenderField } from '../../shared'\r\nimport RenderHobbies from '../RenderHobbies/RenderHobbies'\r\nimport './Member.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowUp, faArrowDown, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n  isMobile\r\n} from \"react-device-detect\";\r\n\r\nconst Member = ({\r\n  member,\r\n  index,\r\n  fields,\r\n  firstName,\r\n  lastName,\r\n  maxHobbiesLength,\r\n  hobbies,\r\n  moveCard,\r\n  endDrag,\r\n  beginDrag,\r\n  blockInput,\r\n  highLight\r\n}) => {\r\n  const fieldsLength = fields.length\r\n  const ref = useRef(null)\r\n  const [, drop] = useDrop({\r\n    accept: MemberTypes.MEMBER,\r\n    hover(item, monitor) {\r\n      if (!ref.current) {\r\n        return\r\n      }\r\n      const dragIndex = item.index\r\n      const hoverIndex = index\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset()\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n      // Time to actually perform the action\r\n      moveCard(dragIndex, hoverIndex)\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  })\r\n  const [collectedProps, drag] = useDrag({\r\n    item: { type: MemberTypes.MEMBER, index },\r\n    collect: monitor => {\r\n      return {\r\n        isDragging: monitor.isDragging(),\r\n      }\r\n    },\r\n    end: () => endDrag(false),\r\n    begin: () => beginDrag(true)\r\n  })\r\n  const { isDragging } = collectedProps\r\n  const opacity = isDragging ? 1 : 1\r\n  fieldsLength > 1 && drag(drop(ref))\r\n\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      <li\r\n        className={(highLight ? 'member_highLight' : '') + ' list-group-item member '} key={index}>\r\n        <div className={(isMobile ? 'member__actions_visible' : '') +\r\n          ' member__actions '\r\n        }>\r\n          {fieldsLength > 1 && <div>\r\n            <button\r\n              className=\"member__action\"\r\n              type=\"button\"\r\n              onClick={() => fields.move(index, index === 0 ? fieldsLength - 1 : index - 1)}>\r\n              <FontAwesomeIcon icon={faArrowUp} />\r\n            </button>\r\n            <button\r\n              className=\"member__action\"\r\n              type=\"button\"\r\n              onClick={() => fields.move(index, index === fieldsLength - 1 ? 0 : index + 1)}>\r\n              <FontAwesomeIcon icon={faArrowDown} />\r\n            </button>\r\n          </div>}\r\n\r\n          <button\r\n            className=\"member__action\"\r\n            type=\"button\"\r\n            title=\"Remove Member\"\r\n            onClick={() => fields.remove(index)}\r\n          >\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </button>\r\n        </div>\r\n\r\n        <h4>Member #{index + 1}\r\n          <div className=\"border text-secondary px-2 py-2 mt-2\" style={{\r\n            color: 'grey',\r\n            fontSize: '12px'\r\n          }}>{firstName} <br /> {lastName}</div>\r\n        </h4>\r\n        <div style={{ position: 'relative' }}>\r\n          <Field\r\n            blockInput={blockInput}\r\n            name={`${member}.firstName`}\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"First Name\"\r\n          />\r\n          <Field\r\n            blockInput={blockInput}\r\n            name={`${member}.lastName`}\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"Last Name\"\r\n          />\r\n\r\n          <div className=\"mb-2\">\r\n            {hobbies && hobbies.map((b, i) =>\r\n              <a\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n                key={b + i.toString()}\r\n                href={`https://www.google.com/search?q=${b}`}>\r\n                <span className=\"badge badge-primary mr-1\">{b}</span>\r\n              </a>)}\r\n          </div>\r\n\r\n          <FieldArray\r\n            blockInput={isDragging}\r\n            maxHobbiesLength={maxHobbiesLength}\r\n            name={`${member}.hobbies$`}\r\n            component={RenderHobbies} />\r\n        </div>\r\n      </li>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Member\r\n\r\nexport const listing = `\r\nimport React, { useRef } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\nimport MemberTypes from './MemberTypes'\r\nimport { Field, FieldArray } from 'redux-form'\r\nimport { RenderField } from '../../shared'\r\nimport RenderHobbies from '../RenderHobbies/RenderHobbies'\r\nimport './Member.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowUp, faArrowDown, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n  isMobile\r\n} from \"react-device-detect\";\r\n\r\nconst Member = ({\r\n  member,\r\n  index,\r\n  fields,\r\n  firstName,\r\n  lastName,\r\n  maxHobbiesLength,\r\n  hobbies,\r\n  moveCard,\r\n  endDrag,\r\n  beginDrag,\r\n  blockInput,\r\n  highLight\r\n}) => {\r\n  const fieldsLength = fields.length\r\n  const ref = useRef(null)\r\n  const [, drop] = useDrop({\r\n    accept: MemberTypes.MEMBER,\r\n    hover(item, monitor) {\r\n      if (!ref.current) {\r\n        return\r\n      }\r\n      const dragIndex = item.index\r\n      const hoverIndex = index\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset()\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n      // Time to actually perform the action\r\n      moveCard(dragIndex, hoverIndex)\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  })\r\n  const [collectedProps, drag] = useDrag({\r\n    item: { type: MemberTypes.MEMBER, index },\r\n    collect: monitor => {\r\n      return {\r\n        isDragging: monitor.isDragging(),\r\n      }\r\n    },\r\n    end: () => endDrag(false),\r\n    begin: () => beginDrag(true)\r\n  })\r\n  const { isDragging } = collectedProps\r\n  const opacity = isDragging ? 1 : 1\r\n  fieldsLength > 1 && drag(drop(ref))\r\n\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      <li\r\n        className={(highLight ? 'member_highLight' : '') + ' list-group-item member '} key={index}>\r\n        <div className={(isMobile ? 'member__actions_visible' : '') +\r\n          ' member__actions '\r\n        }>\r\n          {fieldsLength > 1 && <div>\r\n            <button\r\n              className=\"member__action\"\r\n              type=\"button\"\r\n              onClick={() => fields.move(index, index === 0 ? fieldsLength - 1 : index - 1)}>\r\n              <FontAwesomeIcon icon={faArrowUp} />\r\n            </button>\r\n            <button\r\n              className=\"member__action\"\r\n              type=\"button\"\r\n              onClick={() => fields.move(index, index === fieldsLength - 1 ? 0 : index + 1)}>\r\n              <FontAwesomeIcon icon={faArrowDown} />\r\n            </button>\r\n          </div>}\r\n\r\n          <button\r\n            className=\"member__action\"\r\n            type=\"button\"\r\n            title=\"Remove Member\"\r\n            onClick={() => fields.remove(index)}\r\n          >\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </button>\r\n        </div>\r\n\r\n        <h4>Member #{index + 1}\r\n          <div className=\"border text-secondary px-2 py-2 mt-2\" style={{\r\n            color: 'grey',\r\n            fontSize: '12px'\r\n          }}>{firstName} <br /> {lastName}</div>\r\n        </h4>\r\n        <div style={{ position: 'relative' }}>\r\n          <Field\r\n            blockInput={blockInput}\r\n            name={\\`\\${member}.firstName\\`}\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"First Name\"\r\n          />\r\n          <Field\r\n            blockInput={blockInput}\r\n            name={\\`\\${member}.lastName\\`}\r\n            type=\"text\"\r\n            component={RenderField}\r\n            label=\"Last Name\"\r\n          />\r\n\r\n          <div className=\"mb-2\">\r\n            {hobbies && hobbies.map((b, i) =>\r\n              <a\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n                key={b + i.toString()}\r\n                href={\\`https://www.google.com/search?q=\\${b}\\`}>\r\n                <span className=\"badge badge-primary mr-1\">{b}</span>\r\n              </a>)}\r\n          </div>\r\n\r\n          <FieldArray\r\n            blockInput={isDragging}\r\n            maxHobbiesLength={maxHobbiesLength}\r\n            name={\\`\\${member}.hobbies$\\`}\r\n            component={RenderHobbies} />\r\n        </div>\r\n      </li>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Member\r\n`","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport './ShowCaseButton.css'\r\n\r\nconst ShowCaseButton = ({ disabled, theme, text, icon, onClick = () => { } }) => {\r\n  return (\r\n    <button\r\n      style={{ opacity: disabled ? 0.5 : 1 }}\r\n      disabled={disabled}\r\n      className={`show-case-btn_${theme} show-case-btn`}\r\n      onClick={onClick}>\r\n      {icon && <FontAwesomeIcon icon={icon} />}\r\n      {text && (' ' + text)}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default ShowCaseButton\r\n","import { createSelector } from 'reselect'\r\n\r\nexport const uiState = state => state.ui\r\n\r\nexport const getTheme = createSelector(\r\n  uiState,\r\n  uiState => uiState.theme\r\n)\r\n\r\nexport const getPrismShowLoader = createSelector(\r\n  uiState,\r\n  uiState => uiState.prismShowLoader\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Modal, Button, Container, Row, Col } from 'react-bootstrap';\r\nimport './ShowCase.css'\r\nimport { connect } from 'react-redux'\r\nimport ShowCaseButton from '../shared/ShowCaseButton/ShowCaseButton';\r\nimport { faFillDrip } from '@fortawesome/free-solid-svg-icons'\r\nimport { getTheme, getPrismShowLoader } from '../../store/selectors';\r\nimport { uiChangeThemeInDome } from '../../store/actions';\r\n\r\nconst ShowCase = ({\r\n  component,\r\n  codeListining,\r\n  onChangeTheme,\r\n  title,\r\n  theme,\r\n  showLoader\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => {\r\n    setShow(true)\r\n    onChangeTheme(theme)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Modal\r\n          className=\"show-case\"\r\n          dialogClassName=\"show-case__dialog\"\r\n          show={show}\r\n          onHide={handleClose}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Container fluid>\r\n              <Row>\r\n                <Col xs={11}>\r\n                  <Modal.Title>{title}</Modal.Title>\r\n                </Col>\r\n                <Col>\r\n                  <div className=\"show-case__actions\">\r\n                    <ShowCaseButton\r\n                      disabled={showLoader}\r\n                      onClick={() => onChangeTheme(theme === 'prism' ? 'prism-okaidia' : 'prism')}\r\n                      theme={theme}\r\n                      icon={faFillDrip}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"show-case__content\">\r\n              <div className=\"show-case__col\">\r\n                <div className=\"show-case__body\">\r\n                  {component}\r\n                </div>\r\n              </div>\r\n              <div className=\"show-case__col\">\r\n                <div className=\"show-case__body show-case__body_listening\">\r\n                  {codeListining}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button variant=\"secondary\" onClick={handleShow}>Expand</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  theme: getTheme(state),\r\n  showLoader: getPrismShowLoader(state)\r\n})\r\n\r\nconst mapStateToDispatch = dispatch => ({\r\n  onChangeTheme: theme => dispatch(uiChangeThemeInDome(theme))\r\n})\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapStateToDispatch\r\n)(ShowCase)\r\n","import React from 'react'\r\n\r\nfunction Wrapper({ children, title }) {\r\n  return (\r\n    <div className=\"mb-3 mt-3\">\r\n      <div className=\"border px-2 py-2\">\r\n        <div className=\"alert alert-secondary mt-2\" role=\"alert\">\r\n          {title}\r\n        </div>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper","import React from 'react'\r\nimport './Spiner.css'\r\n\r\n\r\nconst Spiner = () => {\r\n  return (\r\n    <div className=\"spiner-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n  )\r\n}\r\n\r\nexport default Spiner\r\n","import React from 'react'\r\nimport 'prismjs'\r\nimport { connect } from 'react-redux'\r\nimport PrismCode from 'react-prism'\r\nimport './CodeListening.css'\r\nimport Spiner from '../shared/Spiner/Spiner'\r\n\r\nimport { getTheme, getPrismShowLoader } from '../../store/selectors'\r\n\r\nexport const availableThemes = ['prism', 'prism-okaidia']\r\n\r\nconst CodeListening = ({\r\n  codeListening,\r\n  lang = 'language-javascript',\r\n  showLoader }) => {\r\n  return (\r\n    <>\r\n    <Spiner/>\r\n      <div className={(showLoader ? 'code-listening__loader_show' : '') +\r\n        \" code-listening__loader\"}\r\n      >\r\n        <Spiner/>\r\n      </div>\r\n      <div className=\"code-listening\">\r\n        <PrismCode component=\"pre\" className={lang}>\r\n          {codeListening}\r\n        </PrismCode>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  theme: getTheme(state),\r\n  showLoader: getPrismShowLoader(state)\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(CodeListening)\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Page from './pages/Page/Page'\r\nimport SyncValidationFormYup, { listing as SyncValidationFormYupListing } from './components/SyncValidationFormYup/SyncValidationFormYup'\r\nimport SimpleForm, { listing as SimpleFormListing } from './components/SimpleForm/SimpleForm'\r\nimport SyncValidationForm, { listing as SyncValidationFormListing } from './components/SyncValidationForm/SyncValidationForm'\r\nimport FieldLevelValidation, { listing as FieldLevelValidationListing } from './components/FieldLevelValidation/FieldLevelValidation'\r\nimport MixedSyncValidation, { listing as MixedSyncValidationListing } from './components/MixedSyncValidation/MixedSyncValidation'\r\nimport AsyncBlurValidation, { listing as AsyncBlurValidationListing } from './components/AsyncBlurValidation/AsyncBlurValidation'\r\nimport AsyncChangeValidation, { listing as AsyncChangeValidationListing } from './components/AsyncChangeValidation/AsyncChangeValidation'\r\nimport InitializeFromState, { listing as InitializeFromStateListing } from './components/InitializeFromState/InitializeFromState'\r\nimport SelectingFormValues, { listing as SelectingFormValuesListing } from './components/SelectingFormValues/SelectingFormValues'\r\nimport FieldArraysForm, { listing as FieldArraysFormListing } from './components/FieldArraysForm/FieldArraysForm'\r\nimport ShowCase from './components/ShowCase/ShowCase'\r\nimport Wrapper from './components/Wrapper/Wrapper'\r\nimport CodeListening from './components/CodeListening/CodeListening'\r\nimport { logger } from './utils'\r\n\r\n\r\nfunction App() {\r\n  const [nicknameRequired, setNicknameRequired] = useState({ nicknameRequired: false })\r\n  const { nicknameRequired: nickRequired } = nicknameRequired\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n\r\n        {/* first */}\r\n        <div className=\"col-sm\">\r\n          <Wrapper title=\"Simple from without validation.\">\r\n            <Page>\r\n              {submit => (<SimpleForm onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={SimpleFormListing} />}\r\n              component={<SimpleForm onSubmit={logger} />}\r\n              title=\"Simple from without validation.\"\r\n            />\r\n          </Wrapper>\r\n\r\n          <Wrapper title=\"Initialize from state.\">\r\n            <Page>\r\n              {submit => (<InitializeFromState onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={InitializeFromStateListing} />}\r\n              component={<InitializeFromState onSubmit={logger} />}\r\n              title=\"Initialize from state.\"\r\n            />\r\n          </Wrapper>\r\n        </div>\r\n\r\n        {/* second */}\r\n        <div className=\"col-sm\">\r\n          <Wrapper title=\"Simple sync validation.\">\r\n            <Page>\r\n              {submit => (<SyncValidationForm onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={SyncValidationFormListing} />}\r\n              component={<SyncValidationForm onSubmit={logger} />}\r\n              title=\"Simple sync validation.\"\r\n            />\r\n          </Wrapper>\r\n\r\n          <Wrapper title=\"Mixed sync validation.(field level and validation fn)\">\r\n            <Page>\r\n              {submit => (<MixedSyncValidation onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={MixedSyncValidationListing} />}\r\n              component={<MixedSyncValidation onSubmit={logger} />}\r\n              title=\"Mixed sync validation.(field level and validation fn)\"\r\n            />\r\n          </Wrapper>\r\n\r\n          <Wrapper title=\"Selecting form values, conditional validation with yup and context\">\r\n            <button\r\n              onClick={() => setNicknameRequired(obj => ({ nicknameRequired: !obj.nicknameRequired }))}\r\n              type=\"submit\"\r\n              className=\"btn btn-secondary\">\r\n              Toggle nickname required \"{nickRequired ? 'required' : 'not required'}\"\r\n          </button>\r\n            <Page>\r\n              {submit => (<SelectingFormValues\r\n                context={nicknameRequired}\r\n                onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={MixedSyncValidationListing} />}\r\n              component={<MixedSyncValidation onSubmit={logger} />}\r\n              title=\"Selecting form values, conditional validation with yup and context\"\r\n            />\r\n          </Wrapper>\r\n        </div>\r\n\r\n        {/* third */}\r\n        <div className=\"col-sm\">\r\n          <Wrapper title=\"Simple sync validation with yup.\">\r\n            <Page>\r\n              {submit => (<SyncValidationFormYup onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={SyncValidationFormYupListing} />}\r\n              component={<SyncValidationFormYup onSubmit={logger} />}\r\n              title=\"Simple sync validation with yup.\"\r\n            />\r\n          </Wrapper>\r\n\r\n          <Wrapper title=\"Async blur validation.(fails on multiple fields validation)\">\r\n            <Page>\r\n              {submit => (<AsyncBlurValidation onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={AsyncBlurValidationListing} />}\r\n              component={<AsyncBlurValidation onSubmit={logger} />}\r\n              title=\"Async blur validation.(fails on multiple fields validation)\"\r\n            />\r\n          </Wrapper>\r\n\r\n          <Wrapper title=\"Field arrays form(moving and DnD)\">\r\n            <Page>\r\n              {submit => (<FieldArraysForm maxHobbiesLength=\"5\" onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={FieldArraysFormListing} />}\r\n              component={<FieldArraysForm onSubmit={logger} />}\r\n              title=\"Field arrays form(moving and DnD)\"\r\n            />\r\n          </Wrapper>\r\n        </div>\r\n\r\n        {/* fourth */}\r\n        <div className=\"col-sm\">\r\n          <Wrapper title=\"Field level validation.\">\r\n            <Page>\r\n              {submit => (<FieldLevelValidation onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={FieldLevelValidationListing} />}\r\n              component={<FieldLevelValidation onSubmit={logger} />}\r\n              title=\"Field level validation.\"\r\n            />\r\n          </Wrapper>\r\n          <Wrapper title=\"Async change validation.(fails on multiple fields validation)\">\r\n            <Page>\r\n              {submit => (<AsyncChangeValidation onSubmit={submit} />)}\r\n            </Page>\r\n            <hr />\r\n            <ShowCase\r\n              codeListining={<CodeListening codeListening={AsyncChangeValidationListing} />}\r\n              component={<AsyncChangeValidation onSubmit={logger} />}\r\n              title=\"Async change validation.(fails on multiple fields validation)\"\r\n            />\r\n          </Wrapper>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport TouchBackend from 'react-dnd-touch-backend'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './configureStore'\r\nimport './index.css';\r\nimport App from './App';\r\nimport {\r\n  isMobile\r\n} from \"react-device-detect\";\r\n\r\nconst { store } = configureStore()\r\n\r\nconst AppBundle = (\r\n  <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </DndProvider>\r\n)\r\n\r\nReactDOM.render(\r\n  AppBundle,\r\n  document.getElementById('root')\r\n);\r\n","\r\nimport { createStore, applyMiddleware, /*compose*/ } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nexport default function configureStore(initialState = {}) {\r\n  const middlewares = [thunk]\r\n\r\n  return {\r\n    store: createStore(\r\n      reducer,\r\n      initialState,\r\n      composeWithDevTools(\r\n        applyMiddleware(...middlewares)\r\n      )\r\n    )\r\n  }\r\n}"],"sourceRoot":""}